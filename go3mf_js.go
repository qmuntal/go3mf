// Copyright 2017 The go-github AUTHORS. All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-accessors; DO NOT EDIT.

package go3mf

import (
	"syscall/js"
)

var (
	jsNS              = "GO3MF"
	objectConstructor = js.Global().Get("Object")
	arrayConstructor  = js.Global().Get("Array")
)

var registeredFuncs []js.Func

func JSRelease() {
	for i := range registeredFuncs {
		registeredFuncs[i].Release()
	}
}

func GetterFunc(fn func() interface{}) js.Func {
	jfn := js.FuncOf(func(_ js.Value, _ []js.Value) interface{} {
		return fn()
	})
	registeredFuncs = append(registeredFuncs, jfn)
	return jfn
}

// JSValue implements js.Wrapper interface.
func (a *Attachment) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("contentType", GetterFunc(func() interface{} { return a.ContentType }))

	v.Set("path", GetterFunc(func() interface{} { return a.Path }))

	return v
}

// JSValue implements js.Wrapper interface.
func (b *Base) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("name", GetterFunc(func() interface{} { return b.Name }))

	return v
}

// JSValue implements js.Wrapper interface.
func (b *BaseMaterials) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("id", GetterFunc(func() interface{} { return b.ID }))

	arr := arrayConstructor.New(len(b.Materials))
	for i, v := range b.Materials {
		arr.SetIndex(i, v)
	}

	return v
}

// JSValue implements js.Wrapper interface.
func (b *Build) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("anyAttr", GetterFunc(func() interface{} { return b.AnyAttr }))

	arr := arrayConstructor.New(len(b.Items))
	for i, v := range b.Items {
		arr.SetIndex(i, v)
	}

	return v
}

// JSValue implements js.Wrapper interface.
func (c *ChildModel) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("any", GetterFunc(func() interface{} { return c.Any }))

	arr := arrayConstructor.New(len(c.Relationships))
	for i, v := range c.Relationships {
		arr.SetIndex(i, v)
	}

	v.Set("resources", GetterFunc(func() interface{} { return c.Resources }))

	return v
}

// JSValue implements js.Wrapper interface.
func (c *Component) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("anyAttr", GetterFunc(func() interface{} { return c.AnyAttr }))

	v.Set("objectId", GetterFunc(func() interface{} { return c.ObjectID }))

	v.Set("transform", GetterFunc(func() interface{} { return c.Transform }))

	return v
}

// JSValue implements js.Wrapper interface.
func (i *Item) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("anyAttr", GetterFunc(func() interface{} { return i.AnyAttr }))

	arr := arrayConstructor.New(len(i.Metadata))
	for i, v := range i.Metadata {
		arr.SetIndex(i, v)
	}

	v.Set("objectId", GetterFunc(func() interface{} { return i.ObjectID }))

	v.Set("partNumber", GetterFunc(func() interface{} { return i.PartNumber }))

	v.Set("transform", GetterFunc(func() interface{} { return i.Transform }))

	return v
}

// JSValue implements js.Wrapper interface.
func (m *Mesh) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("any", GetterFunc(func() interface{} { return m.Any }))

	v.Set("anyAttr", GetterFunc(func() interface{} { return m.AnyAttr }))

	arr := arrayConstructor.New(len(m.Triangles))
	for i, v := range m.Triangles {
		arr.SetIndex(i, v)
	}

	arr := arrayConstructor.New(len(m.Vertices))
	for i, v := range m.Vertices {
		arr.SetIndex(i, v)
	}

	return v
}

// JSValue implements js.Wrapper interface.
func (m *MeshBuilder) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("calculateConnectivity", GetterFunc(func() interface{} { return m.CalculateConnectivity }))

	return v
}

// JSValue implements js.Wrapper interface.
func (m *Metadata) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("preserve", GetterFunc(func() interface{} { return m.Preserve }))

	v.Set("type", GetterFunc(func() interface{} { return m.Type }))

	v.Set("value", GetterFunc(func() interface{} { return m.Value }))

	return v
}

// JSValue implements js.Wrapper interface.
func (m *Model) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("any", GetterFunc(func() interface{} { return m.Any }))

	v.Set("anyAttr", GetterFunc(func() interface{} { return m.AnyAttr }))

	arr := arrayConstructor.New(len(m.Attachments))
	for i, v := range m.Attachments {
		arr.SetIndex(i, v)
	}

	v.Set("build", GetterFunc(func() interface{} { return m.Build }))

	v.Set("language", GetterFunc(func() interface{} { return m.Language }))

	arr := arrayConstructor.New(len(m.Metadata))
	for i, v := range m.Metadata {
		arr.SetIndex(i, v)
	}

	v.Set("path", GetterFunc(func() interface{} { return m.Path }))

	arr := arrayConstructor.New(len(m.Relationships))
	for i, v := range m.Relationships {
		arr.SetIndex(i, v)
	}

	v.Set("resources", GetterFunc(func() interface{} { return m.Resources }))

	arr := arrayConstructor.New(len(m.RootRelationships))
	for i, v := range m.RootRelationships {
		arr.SetIndex(i, v)
	}

	v.Set("thumbnail", GetterFunc(func() interface{} { return m.Thumbnail }))

	v.Set("units", GetterFunc(func() interface{} { return m.Units }))

	return v
}

// JSValue implements js.Wrapper interface.
func (o *Object) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("anyAttr", GetterFunc(func() interface{} { return o.AnyAttr }))

	arr := arrayConstructor.New(len(o.Components))
	for i, v := range o.Components {
		arr.SetIndex(i, v)
	}

	v.Set("id", GetterFunc(func() interface{} { return o.ID }))

	arr := arrayConstructor.New(len(o.Metadata))
	for i, v := range o.Metadata {
		arr.SetIndex(i, v)
	}

	v.Set("name", GetterFunc(func() interface{} { return o.Name }))

	v.Set("partNumber", GetterFunc(func() interface{} { return o.PartNumber }))

	v.Set("pId", GetterFunc(func() interface{} { return o.PID }))

	v.Set("pIndex", GetterFunc(func() interface{} { return o.PIndex }))

	v.Set("thumbnail", GetterFunc(func() interface{} { return o.Thumbnail }))

	v.Set("type", GetterFunc(func() interface{} { return o.Type }))

	return v
}

// JSValue implements js.Wrapper interface.
func (r *Relationship) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("id", GetterFunc(func() interface{} { return r.ID }))

	v.Set("path", GetterFunc(func() interface{} { return r.Path }))

	v.Set("type", GetterFunc(func() interface{} { return r.Type }))

	return v
}

// JSValue implements js.Wrapper interface.
func (r *Resources) JSValue() js.Value {
	v := objectConstructor.New()

	v.Set("anyAttr", GetterFunc(func() interface{} { return r.AnyAttr }))

	arr := arrayConstructor.New(len(r.Assets))
	for i, v := range r.Assets {
		arr.SetIndex(i, v)
	}

	arr := arrayConstructor.New(len(r.Objects))
	for i, v := range r.Objects {
		arr.SetIndex(i, v)
	}

	return v
}
